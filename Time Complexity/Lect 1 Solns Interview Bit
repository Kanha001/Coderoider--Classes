What is the time, space complexity of following code :

        int a = 0, b = 0;    
        for (i = 0; i < N; i++) {
            a = a + rand();  
        }
        for (j = 0; j < M; j++) {
            b = b + rand();
        }
        
        Select your answer from the following options:
O(N * M) time, O(1) space
O(N + M) time, O(N + M) space
O(N + M) time, O(1) space
O(N * M) time, O(N + M) space
O(N * M) time, O(N * M) space

ans -c



What is the time, space complexity of following code :

    int a = 0, b = 0;    
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            a = a + j;
        }
    }
    for (k = 0; k < N; k++) {
        b = b + k;
    } 
    
    
    Select your answer from the following options:
O(N * N) time, O(1) space
O(N) time, O(N) space
O(N) time, O(N) space
O(N * N) time, O(N) space
O(N * N * N) time, O(1) space


ans -a 



What is the time complexity of the following code :

    int a = 0;
    for (i = 0; i < N; i++) {
        for (j = N; j > i; j--) {
            a = a + i + j;
        }
    }
    
    
    ans - o(n2)
    
    
    
   What does it mean when we say that an algorithm X is asymptotically more efficient than Y?
    
    
    Select your answer from the following options:
X will always be a better choice for all inputs
X will always be a better choice for large inputs
X will always be a better choice for small inputs
Y will always be a better choice for small inputs



ans- b

What is the worst case time complexity of the following code :

/* 
 * V is sorted 
 * V.size() = N
 * The function is initially called as searchNumOccurrence(V, k, 0, N-1)
 */
int searchNumOccurrence(vector<int> &V, int k, int start, int end) {
    if (start > end) return 0;
    int mid = (start + end) / 2;
    if (V[mid] < k) return searchNumOccurrence(V, k, mid + 1, end);
    if (V[mid] > k) return searchNumOccurrence(V, k, start, mid - 1);
    return searchNumOccurrence(V, k, start, mid - 1) + 1 + searchNumOccurrence(V, k, mid + 1, end);
}
NOTE : This question involves recursion which will be explained 
later in topic Backtracking. So, if you are not able to approach this question now, you can give it a try later.



It might seem at the first look that the program is O(log N). 
However, the last case 

return searchNumOccurrence(V, k, start, mid - 1) + 1 + searchNumOccurrence(V, k, mid + 1, end);


is the bottleneck step. 
Assuming all the values in the array are the same, we get the following relation : 

T(N) = 2 * T(N/2) + constant

     = 4 * T(N/4) + constant     ( 2 * constant = another constant ) 

     = 8 * T(N/8) + constant 

     â€¦

     = N * T(N/N) + constant 

     = N + constant 

     = O(N)



What is the time complexity of the following code :

        int j = 0;
        for(int i = 0; i < n; ++i) {
            while(j < n && arr[i] < arr[j]) {
                j++;
            }
        }
        
        
        
        o(n)
        
        
        
        
In a competition, four different functions are observed. All the functions use a single for loop and within the for loop, same set of statements are executed.

Consider the following for loops:

  A) for(i = 0; i < n; i++)
 
  B) for(i = 0; i < n; i += 2)
 
  C) for(i = 1; i < n; i *= 2)
 
  D) for(i = n; i > -1; i /= 2)
If n is the size of input(positive), which function is the most efficient? In other words, which loop completes the fastest.


ans- c o(log n)



Which of the following is not bounded by O(n^2)?   

use hit and trial 

Which of the given options provides the increasing order of complexity of functions f1, f2, f3 and f4:

f1(n) = 2^n

f2(n) = n^(3/2)

f3(n) = nLogn

f4(n) = n^(Logn)


use hit and trial 











